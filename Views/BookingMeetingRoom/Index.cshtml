@using System.Text.Json
@using static BPMPlus.Controllers.BookingMeetingRoomController
@model MeetingRooms
@section Style
{
    <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/timepicker/1.3.5/jquery.timepicker.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">

    <style>
        .outside {
            padding: 20px;
            background-color: rgb(225, 239, 252);
            height: 100%;
        }

        .title {
            color: rgba(0, 81, 255, 0.884);
            margin-top: 20px;
            margin-bottom: 30px;
            margin-left: 30px;
            font-weight: bold;
        }

        .inside {
            margin-top: 30px;
            padding: 20px;
            background-color: rgb(225, 229, 252);
            border: 0.5px solid gainsboro;
            justify-content: space-between;
        }

        table {
            width: 80%;
            border-collapse: collapse;
        }

        th {
            background-color: white;
            color: rgba(0, 81, 255, 0.884);
        }

        th, td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: center;
        }

        td {
            background-color: white;
        }

        .form-group {
            display: flex;
            flex-direction: row;
            align-items: center;
            margin-bottom: 10px;
        }

        label {
            margin: auto;
            display: inline;
            width: 200px;
            margin-right: 20PX;
            background-color: #458bfc;
            text-align: center;
            color: white;
            text-decoration: double;
            border-radius: 5%;
        }

        .btn-center {
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .submit-btn {
            display: flex;
            justify-content: center;
            margin-top: 20px;
        }



        .multiselect-container {
            width: 380px;
            position: relative;
            font-family: Arial, sans-serif;
        }

        .multiselect-input-container {
            position: relative;
            cursor: pointer;
        }

        .dropdown-arrow {
            position: absolute;
            right: 10px;
            top: 50%;
            transform: translateY(-50%);
        }

        .multiselect-dropdown {
            display: none;
            position: absolute;
            width: 100%;
            max-height: 300px;
            overflow-y: auto;
            border: 1px solid #ccc;
            background-color: white;
            z-index: 1000;
            border-radius: 4px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }

        .multiselect-item {
            padding: 8px;
            cursor: pointer;
            border-bottom: 1px solid #eee;
        }

            .multiselect-item:hover {
                background-color: #f0f0f0;
            }

            .multiselect-item.department {
                font-weight: bold;
                background-color: #e9e9e9;
            }

            .multiselect-item.name {
                padding-left: 20px;
            }

        .selected-items {
            margin-top: 10px;
        }

        .selected-item {
            display: inline-block;
            margin-right: 5px;
            margin-bottom: 5px;
            padding: 4px 8px;
            background-color: #e0e0e0;
            border-radius: 16px;
            font-size: 14px;
        }

        .remove-item {
            cursor: pointer;
            margin-left: 5px;
            font-weight: bold;
        }

        .search-input {
            width: calc(100% - 16px);
            margin: 8px;
            padding: 4px;
            border: 1px solid #ccc;
            border-radius: 4px;
        }

    </style>
}

<!-- outside -->
<div class="outside">
    <h1 class="title">新增預約</h1>

    <!-- inside -->
    <div class="inside row">

        <div class="col-5">
            <div class="form-group">
                <label>選擇會議室</label>
                <select class="form-control selectRoom" asp-items="ViewBag.MeetingRooms">
                    <option value="">-- 請選擇會議室 --</option>
                </select>
            </div>

            <div class="form-group">
                <label for="">可容納人數</label>
                <input class="form-control accommodation" Disabled />
            </div>

            <div class="form-group">
                <label for="">預約日期</label>
                <input type="date" min="@ViewBag.MinDate" class="form-control bookingDate" style="outline:none;" />
            </div>

            <div class="form-group">
                <label for="">開始時間</label>
                <select id="startTimeSelect" class="form-control startTimeSelect" style="outline:none;">
                </select>
            </div>

            <div class="form-group">
                <label for="">結束時間</label>
                <select id="endTimeSelect" class="form-control endTimeSelect" style="outline:none;">
                </select>
            </div>

            <div class="form-group">
                <label for="">預約人</label>
                <input type="text" class="form-control meetingHost" value="@ViewBag.MeetingHost" Disabled />
            </div>

            <div class="form-group">
                <label for="">預約部門</label>
                <input type="text" class="form-control" value="@ViewBag.DepartmentName" Disabled />
            </div>

            <div class="form-group">
                <label for="">與會者</label>
                <div class="multiselect-container">
                    <div class="multiselect-input-container">
                        <input type="text" class="multiselect-input form-control members" placeholder="-- 請加入與會者 --">
                        <span class="dropdown-arrow">▼</span>
                        <div class="multiselect-dropdown">
                            <input type="text" class="search-input" placeholder="搜尋">
                        </div>
                    </div>
                </div>
            </div>
            <div id="members" class="selected-items" style="margin-bottom:10px;"></div>

            <div class="form-group">
                <label for="">備註</label>
                <textarea class="form-control note"></textarea>
            </div>

            <div class="btn-center">
                <button id="submitButton" class="btn btn-success">送出</button>
            </div>
        </div>

        <div class="col-7">
            @await Html.PartialAsync("CurrentMeetingRoom_PartialView")
        </div>

    </div>
</div>





@section Scripts
{
    <script src="//cdnjs.cloudflare.com/ajax/libs/timepicker/1.3.5/jquery.timepicker.min.js"></script>

    <script>
        $(document).ready(function () {

            //加入與會者選擇器
            var colleagues = @Html.Raw(ViewBag.Employees);
            let selectedItems = [];
            let isDropdownOpen = false;

            function renderDropdown() {
                const $dropdown = $('.multiselect-dropdown');
                $dropdown.find('.multiselect-item').remove();
                $.each(colleagues, function (department, employees) {
                    $dropdown.append($('<div>').addClass('multiselect-item department').text(department));
                    $.each(employees, function (index, employee) {
                        // 假設 employee 是一個包含 name 和 id 的對象
                        if (!selectedItems.some(item => item.UserId === employee.UserId)) {
                            $('<div>')
                                .addClass('multiselect-item name')
                                .html(`${employee.UserId} <span class="employee-UserId">${employee.UserName}</span>`)
                                .on('click', function (e) {
                                    e.stopPropagation();
                                    selectItem(employee);
                                })
                                .appendTo($dropdown);
                        }
                    });
                });
            }

            function selectItem(employee) {
                selectedItems.push(employee);
                renderSelectedItems();
                $('.search-input').val('');
                renderDropdown();
            }

            function removeItem(employee) {
                selectedItems = selectedItems.filter(item => item.UserId !== employee.UserId);
                renderSelectedItems();
                renderDropdown();
            }

            function renderSelectedItems() {
                const $selectedItems = $('.selected-items');
                $selectedItems.empty();
                selectedItems.forEach(employee => {
                    $('<div>')
                        .addClass('selected-item')
                        .html(`${employee.UserId} ${employee.UserName} <span class="remove-item">✕</span>`)
                        .find('.remove-item')
                        .on('click', function (e) {
                            e.stopPropagation();
                            removeItem(employee);
                        })
                        .end()
                        .appendTo($selectedItems);
                });
            }

            function toggleDropdown() {
                isDropdownOpen = !isDropdownOpen;
                $('.multiselect-dropdown').toggle(isDropdownOpen);
                $('.dropdown-arrow').text(isDropdownOpen ? '▲' : '▼');
            }

            $('.multiselect-input-container').on('click', function (e) {
                e.stopPropagation();
                toggleDropdown();
                if (isDropdownOpen) {
                    renderDropdown();
                    $('.search-input').focus();
                }
            });

            $('.search-input').on('input', function () {
                const searchTerm = $(this).val().toLowerCase();
                $('.multiselect-item').each(function () {
                    const $item = $(this);
                    if ($item.hasClass('department')) {
                        $item.show();
                    } else {
                        const itemText = $item.text().toLowerCase();
                        if (itemText.includes(searchTerm)) {
                            $item.show();
                            $item.prevAll('.department:first').show();
                        } else {
                            $item.hide();
                        }
                    }
                });
            });

            $(document).on('click', function () {
                if (isDropdownOpen) {
                    toggleDropdown();
                }
            });

            renderDropdown();
            /* --------------------------------------------------------------------------------------------------------------------------- */

            //選擇會議室取得可容納人數
            $(".selectRoom").change(function () {
                let meetingRoomId = this.value;
                $.ajax({
                    url: '@Url.Action("GetMeetingRoomInfo", "BookingMeetingRoom")',
                    type: 'GET',
                    data: { id: meetingRoomId },
                    success: function (response) {
                        var accommdation = response.data;
                        $(".accommodation").val(accommdation);
                    }
                });
            });

            //取得已預約時間
            let StartSelect = $(".startTimeSelect");
            let EndSelect = $(".endTimeSelect");

            function loadAvailableTimes() {
                let meetingRoomId = $(".selectRoom").val();
                let bookingDate = $(".bookingDate").val();

                if (!bookingDate) return;

                $.ajax({
                    url: '@Url.Action("CheakMeetingRooms", "BookingMeetingRoom")',
                    type: 'GET',
                    data: {
                        RoomId: meetingRoomId,
                        BookingDate: bookingDate
                    },
                    success: function (response) {
                        let bookedTimes = response.data;
                        updateTimeSelects(bookedTimes);
                    }
                });
            }

            function updateTimeSelects(bookedTimes) {
                function isTimeBooked(hour) {
                    return bookedTimes.some(booking => {
                        let start = parseInt(booking.startTime.split(':')[0]);
                        let end = parseInt(booking.endTime.split(':')[0]);
                        return hour >= start && hour < end;
                    });
                }

                //找出下一個被預約的時段
                function getNextBookedTime(startHour) {
                    let nextBooked = bookedTimes.find(booking =>
                        parseInt(booking.startTime.split(':')[0]) > startHour
                    );
                    return nextBooked ? parseInt(nextBooked.startTime.split(':')[0]) : 22;
                }

                //排除已預約時間的時間選擇器
                function generateTimeOptions($select, startHour, endHour, defaultText) {
                    $select.empty().append($('<option>', { value: '', text: defaultText }));
                    for (let hour = startHour; hour < endHour; hour++) {
                        if (!isTimeBooked(hour)) {
                            $select.append($('<option>', {
                                value: hour + ':00',
                                text: hour + ':00'
                            }));
                        }
                    }
                }

                // 初始化時間選項
                generateTimeOptions(StartSelect, 8, 22, '-- 請選擇開始時間 --');
                generateTimeOptions(EndSelect, 8, 22, '-- 請先選擇開始時間 --');
                EndSelect.prop('disabled', true);

                // 當開始時間改變時更新結束時間選項
                StartSelect.off('change').on('change', function () {
                    let startTime = StartSelect.val();
                    if (startTime) {
                        let startHour = parseInt(startTime.split(':')[0]);
                        let nextBookedTime = getNextBookedTime(startHour);
                        generateTimeOptions(EndSelect, startHour + 1, nextBookedTime, '-- 請選擇結束時間 --');
                        EndSelect.prop('disabled', false);
                    } else {
                        EndSelect.empty().append($('<option>', { value: '', text: '-- 請先選擇開始時間 --' }));
                        EndSelect.prop('disabled', true);
                    }
                });
            }

            $(".bookingDate, .selectRoom").change(function () {
                if ($(".selectRoom").val() && $(".bookingDate").val()) {
                    loadAvailableTimes();
                }
            });

            // 監聽日期變
            $(".bookingDate").change(loadAvailableTimes);

            // 監聽會議室變更
            $(".selectRoom").change(function () {
                if ($(".bookingDate").val()) {
                    loadAvailableTimes();
                }
            });

            // submit
            $("#submitButton").click(function () {

                let room = $(".selectRoom").val();

                let bookingDate = $(".bookingDate").val();
                let startTime = $(".startTimeSelect").val();
                let endTime = $(".endTimeSelect").val();

                let saveStartDate = bookingDate + " " + startTime;
                let saveEndDate = bookingDate + " " + endTime;

                let note = $(".note").val();
                let meetingHost = $(".meetingHost").val();
                let members = [];

                $('#members .selected-item').each(function () {
                    // 取得中間的文字部分 (排除 <span>)
                    var text = $(this).contents().filter(function () {
                        return this.nodeType === 3; // 只選擇內文
                    }).text().trim();

                    // 取得UserId, 加入members
                    var firstFourChars = text.substring(0, 4);
                    members.push(firstFourChars);
                });

                //檢查內容
                if (room == "") {
                    alert('會議室不可為空!');
                    retuen;
                }
                if (bookingDate == "") {
                    alert('預約日期不可為空!');
                    return;
                }
                if (startTime == "") {
                    alert('開始時間不可為空!');
                    return;
                }
                if (endTime == "") {
                    alert('結束時間不可為空!');
                    return;
                }
                if (members == "") {
                    alert('與會者不可為空!');
                    return;
                }
                $.ajax({
                    url: '@Url.Action("SubmitBooking", "BookingMeetingRoom")',
                    type: 'post',
                    contentType: 'application/json',
                    data: JSON.stringify({
                        Room: room,
                        StartDate: saveStartDate,
                        EndDate: saveEndDate,
                        Note: note,
                        MeetingHost: meetingHost,
                        Members: members
                    }),
                    success: function (response) {
                        alert('預約成功');
                        window.location.href = "CurrentMeetingRoom/Index/";
                    },
                    error: function () {
                        alert('預約失敗, 請確認選擇時間尚未被預約!');
                    }

                });

            })
        });
        //==================================== Partial
    </script>


    <script src="https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/1.7.7/axios.min.js" integrity="sha512-DdX/YwF5e41Ok+AI81HI8f5/5UsoxCVT9GKYZRIzpLxb8Twz4ZwPPX+jQMwMhNQ9b5+zDEefc+dcvQoPWGNZ3g==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script>
        new Vue({
            el: '#app',
            data: {
                baseAddress: "https://localhost:7129/CurrentMeetingRoom",
                selectedDate: '',
                rooms: [],
                times: ['08:00','09:00', '10:00', '11:00', '12:00', '13:00', '14:00', '15:00', '16:00', '17:00', '18:00','19:00','20:00','21:00','22:00'],
                bookings:[],
                bookedSlots:{},
                bookedDetails:{}
            },
            methods: {
                formatTime(hour) {
                    if (!(hour === undefined)) {
                        const formattedHour = String(hour).padStart(2, '0');
                        return `${formattedHour}:00`;
                    }
                    return "00:00"
                },
                isBooked(room, time) {
                    const hour = parseInt(time.split(':')[0], 10);
                    return this.bookedSlots[room] && this.bookedSlots[room].includes(hour);
                },
                calculateBookedSlots() {

                    if (!Array.isArray(this.bookings)) {
                        console.error("Bookings is not an array:", this.bookings);
                        return;
                    }
                    this.bookedSlots = {};
                    this.bookings.forEach(booking => {
                        const room = booking.meetingRoomId;
                        if (!this.bookedSlots[room]) {
                            this.bookedSlots[room] = [];
                        }
                        for (let i = booking.startTime; i < booking.endTime; i++) {
                            this.bookedSlots[room].push(i);
                        }
                    });
                },
                handclick(room,time) {
                    //當按到不同的會議室顯示對應的資料
                    //先清空內容
                    this.bookedDetails = {};
                    const clickTime = parseInt(time.split(':')[0], 10);
                    const findBooking = this.bookings.filter(booking => {
                        return booking.meetingRoomId === room&&
                            clickTime >= booking.startTime &&
                            clickTime <= booking.endTime;
                    });
                    if(findBooking){
                        this.bookedDetails = findBooking[0];
                    }
                    else{
                        console.log("notfind")
                    }

                }

            },
            mounted() {
                flatpickr(this.$refs.calendarContainer, {
                    inline: true,
                    dateFormat: "Y-m-d",
                    minDate: "today",
                    onChange: (selectedDates, dateStr) => {
                        let _this = this;
                        _this.selectedDate = dateStr;
                        _this.bookedDetails = {};
                        _this.bookedSlots={};
                        axios.get(`${_this.baseAddress}/getMeetingBook/${_this.selectedDate}`)
                            .then(response => {
                                if (response.data && Array.isArray(response.data.data)) {
                                    _this.bookings = response.data.data;
                                    _this.calculateBookedSlots();
                                } else {
                                    console.error('Unexpected data format:', response.data);
                                }
                            })
                            .catch(error => {
                                console.error('Error fetching bookings:', error);
                            });
                    }
                });

                let _this = this;
                _this.rooms = JSON.parse('@Html.Raw(ViewBag.allRooms)');
            }
        });

    </script>
}